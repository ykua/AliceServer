version: '3.8'

services:
  servdb:
    platform: linux/amd64  # ARMチップの場合は指定が必要
    image: mysql
    container_name: ServDB
    hostname: servdb
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always
    environment:
      MYSQL_DATABASE: alice_services
      MYSQL_USER: alice
      MYSQL_PASSWORD: a1icedb%
      MYSQL_ROOT_PASSWORD: a1icer00t%
      TZ: Asia/Tokyo
    volumes:
      - db_serv_storage:/var/lib/mysql
      - ./docker/mysql/my.conf:/etc/mysql/conf.d/my.cnf
      - ./docker/mysql/initdb:/docker-entrypoint-initdb.d
    networks:
      - container_link

  # WEBサービスをFlaskで提供するコンテナ
  app:
    build: ./docker/app
    container_name: AliceApp
    hostname: app
    ports:
      - 8000:5000
    command: flask run --host=0.0.0.0
    restart: always
    volumes:
      - ./src/app:/usr/src/app
    networks:
      - container_link
    depends_on:
      - servdb

  # Discord Bot
  botalice:
    build: ./docker/engine
    container_name: BotAlice
    hostname: botalice
    command: python bot_alice.py
    restart: always
    volumes:
      - ./src/engine:/workspace/
    networks:
      - container_link
    depends_on:
      - servdb

  # Discord Bot
  botbotchi:
    build: ./docker/engine
    container_name: BotBotchi
    hostname: botbotchi
    command: python bot_botchi.py
    restart: always
    volumes:
      - ./src/engine:/workspace/
    networks:
      - container_link
    depends_on:
      - servdb

  # MQTTなどからのリクエストをPythonで処理するコンテナ
  engine:
    build: ./docker/engine
    container_name: AliceEngine
    hostname: engine
    command: python alice_receiver_main.py
    restart: always
    volumes:
      - ./src/engine:/workspace/
    networks:
      - container_link
    depends_on:
      - servdb

  mqtt:
    image: eclipse-mosquitto
    container_name: Mosquitto
    hostname: mosquitto
    ports:
      - 1883:1883
    #      - 8883:8883  #Connect TLS
    restart: always
    entrypoint: mosquitto -c /mosquitto/config/mosquitto.conf
    volumes:
      - ./docker/mosquitto/config:/mosquitto/config
      - ./docker/mosquitto/data:/mosquitto/data
      - ./docker/mosquitto/log:/mosquitto/log
      - ./docker/mosquitto/certs:/mosquitto/certs
    networks:
      - container_link


  # リバースプロキシのためのコンテナ
  web:
    image: steveltn/https-portal
    container_name: Nginx
    hostname: nginx
    ports:
      - 80:80
      - 443:443
    environment:
      DOMAINS: localhost -> http://app:8000  # Djangoコンテナのポートを指定。「,」で繋げて複数指定。
      #      DOMAINS: services.alicel.jp -> http://app:8000, mqtt.alicel.jp -> http://mqtt:1883;
      STAGE: local # Choose local or staging or production
      CLIENT_MAX_BODY_SIZE: 100M
    #      WEBSOCKET: 'true'
    restart: always
    volumes:
      - ssl_data:/var/lib/https-portal
      - ssl_data:/var/log/nginx
    #      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf  #有効化するとエラーになる
    networks:
      - container_link


volumes:
  db_serv_storage:
    name: db_serv_storage

  ssl_data: # SSL証明書格納のためのボリューム
    name: ssl_data


# ネットワーク名に「-」は使わないこと。アンダースコアはOK。
networks:
  default:
    external:
      name: bridge
  
  container_link:
    name: docker_internal